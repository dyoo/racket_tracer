var theTrace = {name: "top-level",
            formals: [],
            formalsShort: [],
            actuals: [],
            actualsShort: [],
            result: "'no-result\n",
            resultShort: "'no-result\n",
            linum: 0,
            idx: 0,
            span: 0,
            children: [{name: "make-heap",
            formals: ["(list 8 4 3 9 1 6 12 14)\n"],
            formalsShort: ["(list 8 4 3 9 1 6 12 14)\n"],
            actuals: ["'(8 4 3 9 1 6 12 14)\n"],
            actualsShort: ["'(8 4 3 9 1 6 12 14)\n"],
            result: "'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode\n       9\n       #(struct:bhnode 14 () ())\n       ())\n     #(struct:bhnode 8 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ())))\n",
            resultShort: "'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ...))\n",
            linum: 61,
            idx: 3189,
            span: 36,
            children: [{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["8\n","'()\n"],
            actualsShort: ["8\n","'()\n"],
            result: "'#(struct:bhnode 8 () ())\n",
            resultShort: "'#(struct:bhnode 8 () ())\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: []},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["4\n","'#(struct:bhnode 8 () ())\n"],
            actualsShort: ["4\n","'#(struct:bhnode 8 () ())\n"],
            result: "'#(struct:bhnode\n   4\n   #(struct:bhnode 8 () ())\n   ())\n",
            resultShort: "'#(struct:bhnode\n   4\n   #(struct:bhnode 8 () ())\n   ())\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["y\n","r\n"],
            formalsShort: ["y\n","r\n"],
            actuals: ["8\n","'()\n"],
            actualsShort: ["8\n","'()\n"],
            result: "'#(struct:bhnode 8 () ())\n",
            resultShort: "'#(struct:bhnode 8 () ())\n",
            linum: 13,
            idx: 323,
            span: 12,
            children: []}]},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["3\n","'#(struct:bhnode\n   4\n   #(struct:bhnode 8 () ())\n   ())\n"],
            actualsShort: ["3\n","'#(struct:bhnode\n   4\n   #(struct:bhnode 8 () ())\n   ())\n"],
            result: "'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   #(struct:bhnode 8 () ()))\n",
            resultShort: "'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   #(struct:bhnode 8 () ()))\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["y\n","r\n"],
            formalsShort: ["y\n","r\n"],
            actuals: ["4\n","'()\n"],
            actualsShort: ["4\n","'()\n"],
            result: "'#(struct:bhnode 4 () ())\n",
            resultShort: "'#(struct:bhnode 4 () ())\n",
            linum: 13,
            idx: 323,
            span: 12,
            children: []}]},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["9\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   #(struct:bhnode 8 () ()))\n"],
            actualsShort: ["9\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   #(struct:bhnode 8 () ()))\n"],
            result: "'#(struct:bhnode\n   3\n   #(struct:bhnode\n     8\n     #(struct:bhnode 9 () ())\n     ())\n   #(struct:bhnode 4 () ()))\n",
            resultShort: "'#(struct:bhnode\n   3\n   #(struct:bhnode 8 ... ())\n   #(struct:bhnode 4 () ()))\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["9\n","'#(struct:bhnode 8 () ())\n"],
            actualsShort: ["9\n","'#(struct:bhnode 8 () ())\n"],
            result: "'#(struct:bhnode\n   8\n   #(struct:bhnode 9 () ())\n   ())\n",
            resultShort: "'#(struct:bhnode\n   8\n   #(struct:bhnode 9 () ())\n   ())\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["9\n","'()\n"],
            actualsShort: ["9\n","'()\n"],
            result: "'#(struct:bhnode 9 () ())\n",
            resultShort: "'#(struct:bhnode 9 () ())\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: []}]}]},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["1\n","'#(struct:bhnode\n   3\n   #(struct:bhnode\n     8\n     #(struct:bhnode 9 () ())\n     ())\n   #(struct:bhnode 4 () ()))\n"],
            actualsShort: ["1\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 8 ... ())\n   #(struct:bhnode 4 () ()))\n"],
            result: "'#(struct:bhnode\n   1\n   #(struct:bhnode\n     3\n     #(struct:bhnode 4 () ())\n     ())\n   #(struct:bhnode\n     8\n     #(struct:bhnode 9 () ())\n     ()))\n",
            resultShort: "'#(struct:bhnode\n   1\n   #(struct:bhnode 3 ... ())\n   #(struct:bhnode 8 ... ()))\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["y\n","r\n"],
            formalsShort: ["y\n","r\n"],
            actuals: ["3\n","'#(struct:bhnode 4 () ())\n"],
            actualsShort: ["3\n","'#(struct:bhnode 4 () ())\n"],
            result: "'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   ())\n",
            resultShort: "'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   ())\n",
            linum: 13,
            idx: 323,
            span: 12,
            children: [{name: "insert",
            formals: ["y\n","r\n"],
            formalsShort: ["y\n","r\n"],
            actuals: ["4\n","'()\n"],
            actualsShort: ["4\n","'()\n"],
            result: "'#(struct:bhnode 4 () ())\n",
            resultShort: "'#(struct:bhnode 4 () ())\n",
            linum: 13,
            idx: 323,
            span: 12,
            children: []}]}]},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["6\n","'#(struct:bhnode\n   1\n   #(struct:bhnode\n     3\n     #(struct:bhnode 4 () ())\n     ())\n   #(struct:bhnode\n     8\n     #(struct:bhnode 9 () ())\n     ()))\n"],
            actualsShort: ["6\n","'#(struct:bhnode\n   1\n   #(struct:bhnode 3 ... ())\n   #(struct:bhnode 8 ... ()))\n"],
            result: "'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 4 () ())\n     ()))\n",
            resultShort: "'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ()))\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["6\n","'#(struct:bhnode\n   8\n   #(struct:bhnode 9 () ())\n   ())\n"],
            actualsShort: ["6\n","'#(struct:bhnode\n   8\n   #(struct:bhnode 9 () ())\n   ())\n"],
            result: "'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n",
            resultShort: "'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: [{name: "insert",
            formals: ["y\n","r\n"],
            formalsShort: ["y\n","r\n"],
            actuals: ["8\n","'()\n"],
            actualsShort: ["8\n","'()\n"],
            result: "'#(struct:bhnode 8 () ())\n",
            resultShort: "'#(struct:bhnode 8 () ())\n",
            linum: 13,
            idx: 323,
            span: 12,
            children: []}]}]},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["12\n","'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 4 () ())\n     ()))\n"],
            actualsShort: ["12\n","'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ()))\n"],
            result: "'#(struct:bhnode\n   1\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ()))\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ())))\n",
            resultShort: "'#(struct:bhnode\n   1\n   #(struct:bhnode 3 ... ...)\n   #(struct:bhnode 6 ... ...))\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["12\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   ())\n"],
            actualsShort: ["12\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 4 () ())\n   ())\n"],
            result: "'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n",
            resultShort: "'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["12\n","'()\n"],
            actualsShort: ["12\n","'()\n"],
            result: "'#(struct:bhnode 12 () ())\n",
            resultShort: "'#(struct:bhnode 12 () ())\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: []}]}]},{name: "insert",
            formals: ["x\n","h\n"],
            formalsShort: ["x\n","h\n"],
            actuals: ["14\n","'#(struct:bhnode\n   1\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ()))\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ())))\n"],
            actualsShort: ["14\n","'#(struct:bhnode\n   1\n   #(struct:bhnode 3 ... ...)\n   #(struct:bhnode 6 ... ...))\n"],
            result: "'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode\n       9\n       #(struct:bhnode 14 () ())\n       ())\n     #(struct:bhnode 8 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ())))\n",
            resultShort: "'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ...))\n",
            linum: 17,
            idx: 522,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["14\n","'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n"],
            actualsShort: ["14\n","'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n"],
            result: "'#(struct:bhnode\n   6\n   #(struct:bhnode\n     9\n     #(struct:bhnode 14 () ())\n     ())\n   #(struct:bhnode 8 () ()))\n",
            resultShort: "'#(struct:bhnode\n   6\n   #(struct:bhnode 9 ... ())\n   #(struct:bhnode 8 () ()))\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["14\n","'#(struct:bhnode 9 () ())\n"],
            actualsShort: ["14\n","'#(struct:bhnode 9 () ())\n"],
            result: "'#(struct:bhnode\n   9\n   #(struct:bhnode 14 () ())\n   ())\n",
            resultShort: "'#(struct:bhnode\n   9\n   #(struct:bhnode 14 () ())\n   ())\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: [{name: "insert",
            formals: ["x\n","r\n"],
            formalsShort: ["x\n","r\n"],
            actuals: ["14\n","'()\n"],
            actualsShort: ["14\n","'()\n"],
            result: "'#(struct:bhnode 14 () ())\n",
            resultShort: "'#(struct:bhnode 14 () ())\n",
            linum: 14,
            idx: 418,
            span: 12,
            children: []}]}]}]}]},{name: "remove-min",
            formals: ["heap\n"],
            formalsShort: ["heap\n"],
            actuals: ["'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode\n       9\n       #(struct:bhnode 14 () ())\n       ())\n     #(struct:bhnode 8 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ())))\n"],
            actualsShort: ["'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ...))\n"],
            result: "'#(struct:bhnode\n   3\n   #(struct:bhnode\n     4\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 14 () ()))\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ())))\n",
            resultShort: "'#(struct:bhnode\n   3\n   #(struct:bhnode 4 ... ...)\n   #(struct:bhnode 6 ... ...))\n",
            linum: 62,
            idx: 3227,
            span: 17,
            children: [{name: "left-most",
            formals: ["h\n"],
            formalsShort: ["h\n"],
            actuals: ["'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode\n       9\n       #(struct:bhnode 14 () ())\n       ())\n     #(struct:bhnode 8 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ())))\n"],
            actualsShort: ["'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ...))\n"],
            result: "14\n",
            resultShort: "14\n",
            linum: 53,
            idx: 2768,
            span: 13,
            children: [{name: "left-most",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode\n   6\n   #(struct:bhnode\n     9\n     #(struct:bhnode 14 () ())\n     ())\n   #(struct:bhnode 8 () ()))\n"],
            actualsShort: ["'#(struct:bhnode\n   6\n   #(struct:bhnode 9 ... ())\n   #(struct:bhnode 8 () ()))\n"],
            result: "14\n",
            resultShort: "14\n",
            linum: 42,
            idx: 2031,
            span: 13,
            children: [{name: "left-most",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode\n   9\n   #(struct:bhnode 14 () ())\n   ())\n"],
            actualsShort: ["'#(struct:bhnode\n   9\n   #(struct:bhnode 14 () ())\n   ())\n"],
            result: "14\n",
            resultShort: "14\n",
            linum: 42,
            idx: 2031,
            span: 13,
            children: [{name: "left-most",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode 14 () ())\n"],
            actualsShort: ["'#(struct:bhnode 14 () ())\n"],
            result: "14\n",
            resultShort: "14\n",
            linum: 42,
            idx: 2031,
            span: 13,
            children: []}]}]}]},{name: "remove-left-most",
            formals: ["h\n"],
            formalsShort: ["h\n"],
            actuals: ["'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode\n       9\n       #(struct:bhnode 14 () ())\n       ())\n     #(struct:bhnode 8 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ())))\n"],
            actualsShort: ["'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ...))\n"],
            result: "'#(struct:bhnode\n   1\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ()))\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ())))\n",
            resultShort: "'#(struct:bhnode\n   1\n   #(struct:bhnode 3 ... ...)\n   #(struct:bhnode 6 ... ...))\n",
            linum: 54,
            idx: 2865,
            span: 20,
            children: [{name: "remove-left-most",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode\n   6\n   #(struct:bhnode\n     9\n     #(struct:bhnode 14 () ())\n     ())\n   #(struct:bhnode 8 () ()))\n"],
            actualsShort: ["'#(struct:bhnode\n   6\n   #(struct:bhnode 9 ... ())\n   #(struct:bhnode 8 () ()))\n"],
            result: "'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n",
            resultShort: "'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n",
            linum: 51,
            idx: 2679,
            span: 20,
            children: [{name: "remove-left-most",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode\n   9\n   #(struct:bhnode 14 () ())\n   ())\n"],
            actualsShort: ["'#(struct:bhnode\n   9\n   #(struct:bhnode 14 () ())\n   ())\n"],
            result: "'#(struct:bhnode 9 () ())\n",
            resultShort: "'#(struct:bhnode 9 () ())\n",
            linum: 51,
            idx: 2679,
            span: 20,
            children: [{name: "remove-left-most",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode 14 () ())\n"],
            actualsShort: ["'#(struct:bhnode 14 () ())\n"],
            result: "'()\n",
            resultShort: "'()\n",
            linum: 51,
            idx: 2679,
            span: 20,
            children: []}]}]}]},{name: "insert-merge",
            formals: ["extra\n","(bhnode-left new-h)\n","(bhnode-right new-h)\n"],
            formalsShort: ["extra\n","(bhnode-left new-h)\n","(bhnode-right new-h)\n"],
            actuals: ["14\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n","'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n"],
            actualsShort: ["14\n","'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n","'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n"],
            result: "'#(struct:bhnode\n   3\n   #(struct:bhnode\n     4\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 14 () ()))\n   #(struct:bhnode\n     6\n     #(struct:bhnode 8 () ())\n     #(struct:bhnode 9 () ())))\n",
            resultShort: "'#(struct:bhnode\n   3\n   #(struct:bhnode 4 ... ...)\n   #(struct:bhnode 6 ... ...))\n",
            linum: 57,
            idx: 3008,
            span: 162,
            children: [{name: "get-min",
            formals: ["y\n"],
            formalsShort: ["y\n"],
            actuals: ["'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n"],
            actualsShort: ["'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n"],
            result: "3\n",
            resultShort: "3\n",
            linum: 26,
            idx: 948,
            span: 11,
            children: []},{name: "get-min",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n"],
            actualsShort: ["'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n"],
            result: "3\n",
            resultShort: "3\n",
            linum: 30,
            idx: 1169,
            span: 11,
            children: []},{name: "get-min",
            formals: ["r\n"],
            formalsShort: ["r\n"],
            actuals: ["'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n"],
            actualsShort: ["'#(struct:bhnode\n   6\n   #(struct:bhnode 8 () ())\n   #(struct:bhnode 9 () ()))\n"],
            result: "6\n",
            resultShort: "6\n",
            linum: 30,
            idx: 1181,
            span: 11,
            children: []},{name: "get-min",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n"],
            actualsShort: ["'#(struct:bhnode\n   3\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 4 () ()))\n"],
            result: "3\n",
            resultShort: "3\n",
            linum: 31,
            idx: 1250,
            span: 11,
            children: []},{name: "insert-merge",
            formals: ["x\n","(bhnode-left l)\n","(bhnode-right l)\n"],
            formalsShort: ["x\n","(bhnode-left l)\n","(bhnode-right l)\n"],
            actuals: ["14\n","'#(struct:bhnode 12 () ())\n","'#(struct:bhnode 4 () ())\n"],
            actualsShort: ["14\n","'#(struct:bhnode 12 () ())\n","'#(struct:bhnode 4 () ())\n"],
            result: "'#(struct:bhnode\n   4\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 14 () ()))\n",
            resultShort: "'#(struct:bhnode\n   4\n   #(struct:bhnode 12 () ())\n   #(struct:bhnode 14 () ()))\n",
            linum: 32,
            idx: 1348,
            span: 49,
            children: [{name: "get-min",
            formals: ["y\n"],
            formalsShort: ["y\n"],
            actuals: ["'#(struct:bhnode 12 () ())\n"],
            actualsShort: ["'#(struct:bhnode 12 () ())\n"],
            result: "12\n",
            resultShort: "12\n",
            linum: 26,
            idx: 948,
            span: 11,
            children: []},{name: "get-min",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode 12 () ())\n"],
            actualsShort: ["'#(struct:bhnode 12 () ())\n"],
            result: "12\n",
            resultShort: "12\n",
            linum: 30,
            idx: 1169,
            span: 11,
            children: []},{name: "get-min",
            formals: ["r\n"],
            formalsShort: ["r\n"],
            actuals: ["'#(struct:bhnode 4 () ())\n"],
            actualsShort: ["'#(struct:bhnode 4 () ())\n"],
            result: "4\n",
            resultShort: "4\n",
            linum: 30,
            idx: 1181,
            span: 11,
            children: []},{name: "get-min",
            formals: ["r\n"],
            formalsShort: ["r\n"],
            actuals: ["'#(struct:bhnode 4 () ())\n"],
            actualsShort: ["'#(struct:bhnode 4 () ())\n"],
            result: "4\n",
            resultShort: "4\n",
            linum: 35,
            idx: 1627,
            span: 11,
            children: []},{name: "get-min",
            formals: ["l\n"],
            formalsShort: ["l\n"],
            actuals: ["'#(struct:bhnode 12 () ())\n"],
            actualsShort: ["'#(struct:bhnode 12 () ())\n"],
            result: "12\n",
            resultShort: "12\n",
            linum: 35,
            idx: 1639,
            span: 11,
            children: []},{name: "get-min",
            formals: ["r\n"],
            formalsShort: ["r\n"],
            actuals: ["'#(struct:bhnode 4 () ())\n"],
            actualsShort: ["'#(struct:bhnode 4 () ())\n"],
            result: "4\n",
            resultShort: "4\n",
            linum: 36,
            idx: 1685,
            span: 11,
            children: []},{name: "insert-merge",
            formals: ["x\n","(bhnode-left r)\n","(bhnode-right r)\n"],
            formalsShort: ["x\n","(bhnode-left r)\n","(bhnode-right r)\n"],
            actuals: ["14\n","'()\n","'()\n"],
            actualsShort: ["14\n","'()\n","'()\n"],
            result: "'#(struct:bhnode 14 () ())\n",
            resultShort: "'#(struct:bhnode 14 () ())\n",
            linum: 39,
            idx: 1764,
            span: 49,
            children: []}]}]}]},{name: "get-min",
            formals: ["heap\n"],
            formalsShort: ["heap\n"],
            actuals: ["'#(struct:bhnode\n   1\n   #(struct:bhnode\n     6\n     #(struct:bhnode\n       9\n       #(struct:bhnode 14 () ())\n       ())\n     #(struct:bhnode 8 () ()))\n   #(struct:bhnode\n     3\n     #(struct:bhnode 12 () ())\n     #(struct:bhnode 4 () ())))\n"],
            actualsShort: ["'#(struct:bhnode\n   1\n   #(struct:bhnode 6 ... ...)\n   #(struct:bhnode 3 ... ...))\n"],
            result: "1\n",
            resultShort: "1\n",
            linum: 63,
            idx: 3245,
            span: 14,
            children: []}]}
var code = "\n\n(define-struct bhnode (value left right))\n\n(define (insert x h)\n  (cond\n    [(empty? h) (make-bhnode x empty empty)]\n    [(bhnode? h)\n     (let [(y (bhnode-value h))\n           (l (bhnode-left h))\n           (r (bhnode-right h))]\n       (if (< x y);always insert into the right (smaller) subtree\n         (make-bhnode x (insert y r) l);once done, make sure that is the left (larger) subtree\n         (make-bhnode y (insert x r) l)))]));we are inserting into an empty heap\n\n(define (make-heap ns)\n  (foldl (lambda (x h) (insert x h)) empty ns))\n \n(define get-min bhnode-value)\n\n(define (remove-min h)\n  (local [(define (insert-merge x l r);makes a new tree from x and the l and r subtrees\n            ;easy, since no structure changes - simply move values around\n            (cond [(andmap (lambda (y)\n                             (or (not (bhnode? y));if x is less than the get-min of all existing subtrees\n                                 (< x (get-min y))))\n                           (list l r))\n                   (make-bhnode x l r)];we can simply put x here - it is a valid tree\n                  [(or (not (bhnode? r));if r is empty\n                       (< (get-min l) (get-min r)));or if l is less than r\n                   (make-bhnode (get-min l);insert it into l and use l as the new min of the tree\n                                (insert-merge x (bhnode-left l) (bhnode-right l));we don't insert it into \n                                r)];r if r is empty because we don't want to change the structure\n                  [(or (not (bhnode? l));proceed as above, with l and r flipped\n                       (< (get-min r) (get-min l)))\n                   (make-bhnode (get-min r)\n           \n                     l\n                                (insert-merge x (bhnode-left r) (bhnode-right r)))]))\n          (define (left-most h);gets the left-most value (the only one we can easily remove)\n            (let ([l (bhnode-left h)]);go left until l is empty, then return the value\n              (cond [(bhnode? l) (left-most l)]\n                    [(empty? l) (bhnode-value h)])))\n          (define (remove-left-most h);removes the left-most value\n            ;we can, since the left subtree is always >= the right tree\n            ;we just move the left subtree to the right afterwards\n            (let ([l (bhnode-left h)])\n              (cond [(bhnode? l);go left until l is empty, than rebuild the tree without the node above the empty l\n                     (make-bhnode (bhnode-value h); we can do this, because if l is empty, r has to be empty for it to\n                                  (bhnode-right h);be a BrownHeap\n                                  (remove-left-most l))]\n                    [(empty? l) empty])))\n          (define extra (left-most h));the new value that we will put into the root and then fix\n          (define new-h (remove-left-most h))];the heap without extra\n    (cond [(empty? new-h) empty];we removed the last value\n          [(bhnode? new-h)\n           (insert-merge extra;new-h is a valid BrownHeap, so this results in a valid BrownHeap\n                  (bhnode-left new-h)\n                  (bhnode-right new-h))])))\n\n(define heap (make-heap (list 8 4 3 9 1 6 12 14)))\n(remove-min heap)\n(get-min heap)"