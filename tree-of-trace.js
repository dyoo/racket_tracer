var theTrace = {formals: "top-level",
            actuals: "top-level",
            result: "no-result",
            children: [{formals: "(how-many A)",
            actuals: "(how-many #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "9",
            children: [{formals: "(how-many (make-dir (dir-name d) (rest (dir-dirs d)) empty))",
            actuals: "(how-many #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "3",
            children: [{formals: "(how-many (make-dir (dir-name d) (rest (dir-dirs d)) empty))",
            actuals: "(how-many #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "1",
            children: [{formals: "(how-many (make-dir (dir-name d) (rest (dir-dirs d)) empty))",
            actuals: "(how-many #(struct:dir A () ()))",
            result: "0",
            children: [{formals: "(length (dir-files d))",
            actuals: "(length ())",
            result: "0",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir A () ()))",
            result: "()",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? ())",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A () ()))",
            result: "()",
            children: []}]},{formals: "(make-dir (dir-name d) (rest (dir-dirs d)) empty)",
            actuals: "(make-dir A () ())",
            result: "#(struct:dir A () ())",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir D () (#(struct:file n 1 ()))))",
            children: []},{formals: "(dir-name d)",
            actuals: "(dir-name #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "A",
            children: []}]}]},{formals: "(how-many (first (dir-dirs d)))",
            actuals: "(how-many #(struct:dir D () (#(struct:file n 1 ()))))",
            result: "1",
            children: [{formals: "(length (dir-files d))",
            actuals: "(length (#(struct:file n 1 ())))",
            result: "1",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir D () (#(struct:file n 1 ()))))",
            result: "(#(struct:file n 1 ()))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? ())",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir D () (#(struct:file n 1 ()))))",
            result: "()",
            children: []}]},{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(length (dir-files d))",
            actuals: "(length ())",
            result: "0",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "()",
            children: []}]},{formals: "(cons? (dir-dirs d))",
            actuals: "(cons? (#(struct:dir D () (#(struct:file n 1 ())))))",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? (#(struct:dir D () (#(struct:file n 1 ())))))",
            result: "#f",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(make-dir (dir-name d) (rest (dir-dirs d)) empty)",
            actuals: "(make-dir A (#(struct:dir D () (#(struct:file n 1 ())))) ())",
            result: "#(struct:dir A (#(struct:dir D () (#(struct:file n 1 ())))) ())",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []},{formals: "(dir-name d)",
            actuals: "(dir-name #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "A",
            children: []}]}]},{formals: "(how-many (first (dir-dirs d)))",
            actuals: "(how-many #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))))",
            result: "2",
            children: [{formals: "(length (dir-files d))",
            actuals: "(length (#(struct:file l 1 ()) #(struct:file m 1 ())))",
            result: "2",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))))",
            result: "(#(struct:file l 1 ()) #(struct:file m 1 ()))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? ())",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))))",
            result: "()",
            children: []}]},{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(length (dir-files d))",
            actuals: "(length ())",
            result: "0",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "()",
            children: []}]},{formals: "(cons? (dir-dirs d))",
            actuals: "(cons? (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))))",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))))",
            result: "#f",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ()))",
            result: "(#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(make-dir (dir-name d) (rest (dir-dirs d)) empty)",
            actuals: "(make-dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ())",
            result: "#(struct:dir A (#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) ())",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "(#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []},{formals: "(dir-name d)",
            actuals: "(dir-name #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "A",
            children: []}]}]},{formals: "(how-many (first (dir-dirs d)))",
            actuals: "(how-many #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "3",
            children: [{formals: "(how-many (make-dir (dir-name d) (rest (dir-dirs d)) empty))",
            actuals: "(how-many #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "0",
            children: [{formals: "(how-many (make-dir (dir-name d) (rest (dir-dirs d)) empty))",
            actuals: "(how-many #(struct:dir B () ()))",
            result: "0",
            children: [{formals: "(length (dir-files d))",
            actuals: "(length ())",
            result: "0",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir B () ()))",
            result: "()",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? ())",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B () ()))",
            result: "()",
            children: []}]},{formals: "(make-dir (dir-name d) (rest (dir-dirs d)) empty)",
            actuals: "(make-dir B () ())",
            result: "#(struct:dir B () ())",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "(#(struct:dir I () ()))",
            children: []},{formals: "(dir-name d)",
            actuals: "(dir-name #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "B",
            children: []}]}]},{formals: "(how-many (first (dir-dirs d)))",
            actuals: "(how-many #(struct:dir I () ()))",
            result: "0",
            children: [{formals: "(length (dir-files d))",
            actuals: "(length ())",
            result: "0",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir I () ()))",
            result: "()",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? ())",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir I () ()))",
            result: "()",
            children: []}]},{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "(#(struct:dir I () ()))",
            children: []}]},{formals: "(length (dir-files d))",
            actuals: "(length ())",
            result: "0",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "()",
            children: []}]},{formals: "(cons? (dir-dirs d))",
            actuals: "(cons? (#(struct:dir I () ())))",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "(#(struct:dir I () ()))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? (#(struct:dir I () ())))",
            result: "#f",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir I () ())) ()))",
            result: "(#(struct:dir I () ()))",
            children: []}]},{formals: "(make-dir (dir-name d) (rest (dir-dirs d)) empty)",
            actuals: "(make-dir B (#(struct:dir I () ())) ())",
            result: "#(struct:dir B (#(struct:dir I () ())) ())",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "(#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ()))",
            children: []},{formals: "(dir-name d)",
            actuals: "(dir-name #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "B",
            children: []}]}]},{formals: "(how-many (first (dir-dirs d)))",
            actuals: "(how-many #(struct:dir H () (#(struct:file o 1 ()))))",
            result: "1",
            children: [{formals: "(length (dir-files d))",
            actuals: "(length (#(struct:file o 1 ())))",
            result: "1",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir H () (#(struct:file o 1 ()))))",
            result: "(#(struct:file o 1 ()))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? ())",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir H () (#(struct:file o 1 ()))))",
            result: "()",
            children: []}]},{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "(#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ()))",
            children: []}]},{formals: "(length (dir-files d))",
            actuals: "(length (#(struct:file j 1 ()) #(struct:file k 1 ())))",
            result: "2",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "(#(struct:file j 1 ()) #(struct:file k 1 ()))",
            children: []}]},{formals: "(cons? (dir-dirs d))",
            actuals: "(cons? (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())))",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "(#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ()))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())))",
            result: "#f",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))))",
            result: "(#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ()))",
            children: []}]},{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "(#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(length (dir-files d))",
            actuals: "(length (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ())))",
            result: "3",
            children: [{formals: "(dir-files d)",
            actuals: "(dir-files #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "(#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))",
            children: []}]},{formals: "(cons? (dir-dirs d))",
            actuals: "(cons? (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))))",
            result: "#t",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "(#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(empty? (dir-dirs d))",
            actuals: "(empty? (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))))",
            result: "#f",
            children: [{formals: "(dir-dirs d)",
            actuals: "(dir-dirs #(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))))",
            result: "(#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]}]},{formals: "(make-dir A (list B C D) (list e1 f g))",
            actuals: "(make-dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ())))",
            result: "#(struct:dir A (#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ())))) (#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ())))",
            children: [{formals: "(list e1 f g)",
            actuals: "(list #(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))",
            result: "(#(struct:file e 1 ()) #(struct:file f 1 ()) #(struct:file g 1 ()))",
            children: []},{formals: "(list B C D)",
            actuals: "(list #(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            result: "(#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ()))) #(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ()))) #(struct:dir D () (#(struct:file n 1 ()))))",
            children: []}]},{formals: "(make-dir D empty (list n))",
            actuals: "(make-dir D () (#(struct:file n 1 ())))",
            result: "#(struct:dir D () (#(struct:file n 1 ())))",
            children: [{formals: "(list n)",
            actuals: "(list #(struct:file n 1 ()))",
            result: "(#(struct:file n 1 ()))",
            children: []}]},{formals: "(make-dir C empty (list l m))",
            actuals: "(make-dir C () (#(struct:file l 1 ()) #(struct:file m 1 ())))",
            result: "#(struct:dir C () (#(struct:file l 1 ()) #(struct:file m 1 ())))",
            children: [{formals: "(list l m)",
            actuals: "(list #(struct:file l 1 ()) #(struct:file m 1 ()))",
            result: "(#(struct:file l 1 ()) #(struct:file m 1 ()))",
            children: []}]},{formals: "(make-dir B (list H I) (list j k))",
            actuals: "(make-dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ())))",
            result: "#(struct:dir B (#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ())) (#(struct:file j 1 ()) #(struct:file k 1 ())))",
            children: [{formals: "(list j k)",
            actuals: "(list #(struct:file j 1 ()) #(struct:file k 1 ()))",
            result: "(#(struct:file j 1 ()) #(struct:file k 1 ()))",
            children: []},{formals: "(list H I)",
            actuals: "(list #(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ()))",
            result: "(#(struct:dir H () (#(struct:file o 1 ()))) #(struct:dir I () ()))",
            children: []}]},{formals: "(make-dir I empty empty)",
            actuals: "(make-dir I () ())",
            result: "#(struct:dir I () ())",
            children: []},{formals: "(make-dir H empty (list o))",
            actuals: "(make-dir H () (#(struct:file o 1 ())))",
            result: "#(struct:dir H () (#(struct:file o 1 ())))",
            children: [{formals: "(list o)",
            actuals: "(list #(struct:file o 1 ()))",
            result: "(#(struct:file o 1 ()))",
            children: []}]},{formals: "(make-file o 1 empty)",
            actuals: "(make-file o 1 ())",
            result: "#(struct:file o 1 ())",
            children: []},{formals: "(make-file n 1 empty)",
            actuals: "(make-file n 1 ())",
            result: "#(struct:file n 1 ())",
            children: []},{formals: "(make-file m 1 empty)",
            actuals: "(make-file m 1 ())",
            result: "#(struct:file m 1 ())",
            children: []},{formals: "(make-file l 1 empty)",
            actuals: "(make-file l 1 ())",
            result: "#(struct:file l 1 ())",
            children: []},{formals: "(make-file k 1 empty)",
            actuals: "(make-file k 1 ())",
            result: "#(struct:file k 1 ())",
            children: []},{formals: "(make-file j 1 empty)",
            actuals: "(make-file j 1 ())",
            result: "#(struct:file j 1 ())",
            children: []},{formals: "(make-file g 1 empty)",
            actuals: "(make-file g 1 ())",
            result: "#(struct:file g 1 ())",
            children: []},{formals: "(make-file f 1 empty)",
            actuals: "(make-file f 1 ())",
            result: "#(struct:file f 1 ())",
            children: []},{formals: "(make-file e 1 empty)",
            actuals: "(make-file e 1 ())",
            result: "#(struct:file e 1 ())",
            children: []}]}