var theTrace = {name: "top-level",
            formals: [],
            formalsShort: [],
            actuals: [],
            actualsShort: [],
            result: "'no-result\n",
            resultShort: "'no-result\n",
            children: [{name: "permutations",
            formals: ["(list 1 2 3 4)\n"],
            formalsShort: ["(list 1 2 3 4)\n"],
            actuals: ["'(1 2 3 4)\n"],
            actualsShort: ["'(1 2 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2 3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2 3 4)\n"],
            actualsShort: ["'(2 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3 4)\n"],
            actualsShort: ["'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(4)\n"],
            actualsShort: ["'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3 4)\n"],
            actualsShort: ["3\n","'(3 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3)\n"],
            actualsShort: ["'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(3 4)\n"],
            actualsShort: ["4\n","'(3 4)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2 3 4)\n"],
            actualsShort: ["2\n","'(2 3 4)\n"],
            result: "'(3 4)\n",
            resultShort: "'(3 4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2 4)\n"],
            actualsShort: ["'(2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(4)\n"],
            actualsShort: ["'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2 4)\n"],
            actualsShort: ["2\n","'(2 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2)\n"],
            actualsShort: ["'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(2 4)\n"],
            actualsShort: ["4\n","'(2 4)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(2 3 4)\n"],
            actualsShort: ["3\n","'(2 3 4)\n"],
            result: "'(2 4)\n",
            resultShort: "'(2 4)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3 4)\n"],
            actualsShort: ["3\n","'(3 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2 3)\n"],
            actualsShort: ["'(2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3)\n"],
            actualsShort: ["'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2 3)\n"],
            actualsShort: ["2\n","'(2 3)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2)\n"],
            actualsShort: ["'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(2 3)\n"],
            actualsShort: ["3\n","'(2 3)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(2 3 4)\n"],
            actualsShort: ["4\n","'(2 3 4)\n"],
            result: "'(2 3)\n",
            resultShort: "'(2 3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(3 4)\n"],
            actualsShort: ["4\n","'(3 4)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 2 3 4)\n"],
            actualsShort: ["1\n","'(1 2 3 4)\n"],
            result: "'(2 3 4)\n",
            resultShort: "'(2 3 4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 3 4)\n"],
            actualsShort: ["'(1 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3 4)\n"],
            actualsShort: ["'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(4)\n"],
            actualsShort: ["'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3 4)\n"],
            actualsShort: ["3\n","'(3 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3)\n"],
            actualsShort: ["'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(3 4)\n"],
            actualsShort: ["4\n","'(3 4)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 3 4)\n"],
            actualsShort: ["1\n","'(1 3 4)\n"],
            result: "'(3 4)\n",
            resultShort: "'(3 4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 4)\n"],
            actualsShort: ["'(1 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(4)\n"],
            actualsShort: ["'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 4)\n"],
            actualsShort: ["1\n","'(1 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1)\n"],
            actualsShort: ["'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1)\n"],
            actualsShort: ["1\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(1 4)\n"],
            actualsShort: ["4\n","'(1 4)\n"],
            result: "'(1)\n",
            resultShort: "'(1)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(1 3 4)\n"],
            actualsShort: ["3\n","'(1 3 4)\n"],
            result: "'(1 4)\n",
            resultShort: "'(1 4)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3 4)\n"],
            actualsShort: ["3\n","'(3 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 3)\n"],
            actualsShort: ["'(1 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3)\n"],
            actualsShort: ["'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 3)\n"],
            actualsShort: ["1\n","'(1 3)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1)\n"],
            actualsShort: ["'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1)\n"],
            actualsShort: ["1\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(1 3)\n"],
            actualsShort: ["3\n","'(1 3)\n"],
            result: "'(1)\n",
            resultShort: "'(1)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(1 3 4)\n"],
            actualsShort: ["4\n","'(1 3 4)\n"],
            result: "'(1 3)\n",
            resultShort: "'(1 3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(3 4)\n"],
            actualsShort: ["4\n","'(3 4)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(1 2 3 4)\n"],
            actualsShort: ["2\n","'(1 2 3 4)\n"],
            result: "'(1 3 4)\n",
            resultShort: "'(1 3 4)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["2\n","'(2 3 4)\n"],
            actualsShort: ["2\n","'(2 3 4)\n"],
            result: "'(3 4)\n",
            resultShort: "'(3 4)\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 2 4)\n"],
            actualsShort: ["'(1 2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2 4)\n"],
            actualsShort: ["'(2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(4)\n"],
            actualsShort: ["'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2 4)\n"],
            actualsShort: ["2\n","'(2 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2)\n"],
            actualsShort: ["'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(2 4)\n"],
            actualsShort: ["4\n","'(2 4)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 2 4)\n"],
            actualsShort: ["1\n","'(1 2 4)\n"],
            result: "'(2 4)\n",
            resultShort: "'(2 4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 4)\n"],
            actualsShort: ["'(1 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(4)\n"],
            actualsShort: ["'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 4)\n"],
            actualsShort: ["1\n","'(1 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1)\n"],
            actualsShort: ["'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1)\n"],
            actualsShort: ["1\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(1 4)\n"],
            actualsShort: ["4\n","'(1 4)\n"],
            result: "'(1)\n",
            resultShort: "'(1)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(1 2 4)\n"],
            actualsShort: ["2\n","'(1 2 4)\n"],
            result: "'(1 4)\n",
            resultShort: "'(1 4)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["2\n","'(2 4)\n"],
            actualsShort: ["2\n","'(2 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 2)\n"],
            actualsShort: ["'(1 2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2)\n"],
            actualsShort: ["'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 2)\n"],
            actualsShort: ["1\n","'(1 2)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1)\n"],
            actualsShort: ["'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1)\n"],
            actualsShort: ["1\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(1 2)\n"],
            actualsShort: ["2\n","'(1 2)\n"],
            result: "'(1)\n",
            resultShort: "'(1)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(1 2 4)\n"],
            actualsShort: ["4\n","'(1 2 4)\n"],
            result: "'(1 2)\n",
            resultShort: "'(1 2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(2 4)\n"],
            actualsShort: ["4\n","'(2 4)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(1 2 3 4)\n"],
            actualsShort: ["3\n","'(1 2 3 4)\n"],
            result: "'(1 2 4)\n",
            resultShort: "'(1 2 4)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(2 3 4)\n"],
            actualsShort: ["3\n","'(2 3 4)\n"],
            result: "'(2 4)\n",
            resultShort: "'(2 4)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3 4)\n"],
            actualsShort: ["3\n","'(3 4)\n"],
            result: "'(4)\n",
            resultShort: "'(4)\n",
            children: []}]}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["4\n"],
            actualsShort: ["4\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 2 3)\n"],
            actualsShort: ["'(1 2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2 3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2 3)\n"],
            actualsShort: ["'(2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3)\n"],
            actualsShort: ["'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2 3)\n"],
            actualsShort: ["2\n","'(2 3)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2)\n"],
            actualsShort: ["'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(2 3)\n"],
            actualsShort: ["3\n","'(2 3)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 2 3)\n"],
            actualsShort: ["1\n","'(1 2 3)\n"],
            result: "'(2 3)\n",
            resultShort: "'(2 3)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 3)\n"],
            actualsShort: ["'(1 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(3)\n"],
            actualsShort: ["'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 3)\n"],
            actualsShort: ["1\n","'(1 3)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1)\n"],
            actualsShort: ["'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1)\n"],
            actualsShort: ["1\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(1 3)\n"],
            actualsShort: ["3\n","'(1 3)\n"],
            result: "'(1)\n",
            resultShort: "'(1)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(1 2 3)\n"],
            actualsShort: ["2\n","'(1 2 3)\n"],
            result: "'(1 3)\n",
            resultShort: "'(1 3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["2\n","'(2 3)\n"],
            actualsShort: ["2\n","'(2 3)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["3\n"],
            actualsShort: ["3\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1 2)\n"],
            actualsShort: ["'(1 2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1 2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(2)\n"],
            actualsShort: ["'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1 2)\n"],
            actualsShort: ["1\n","'(1 2)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["2\n"],
            actualsShort: ["2\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'(1)\n"],
            actualsShort: ["'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "map-concat",
            formals: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            formalsShort: ["(lambda (num)\n  (collect\n   (lambda (perms) (cons num perms))\n   (permutations (drop num lst))))\n","lst\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "f",
            formals: ["(first l)\n"],
            formalsShort: ["(first l)\n"],
            actuals: ["1\n"],
            actualsShort: ["1\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: [{name: "collect",
            formals: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            formalsShort: ["(lambda (perms) (cons num perms))\n","(permutations (drop num lst))\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:31:29>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "permutations",
            formals: ["(drop num lst)\n"],
            formalsShort: ["(drop num lst)\n"],
            actuals: ["'()\n"],
            actualsShort: ["'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["1\n","'(1)\n"],
            actualsShort: ["1\n","'(1)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["2\n","'(1 2)\n"],
            actualsShort: ["2\n","'(1 2)\n"],
            result: "'(1)\n",
            resultShort: "'(1)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["2\n","'(2)\n"],
            actualsShort: ["2\n","'(2)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["3\n","'(1 2 3)\n"],
            actualsShort: ["3\n","'(1 2 3)\n"],
            result: "'(1 2)\n",
            resultShort: "'(1 2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(2 3)\n"],
            actualsShort: ["3\n","'(2 3)\n"],
            result: "'(2)\n",
            resultShort: "'(2)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["3\n","'(3)\n"],
            actualsShort: ["3\n","'(3)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]}]},{name: "drop",
            formals: ["num\n","lst\n"],
            formalsShort: ["num\n","lst\n"],
            actuals: ["4\n","'(1 2 3 4)\n"],
            actualsShort: ["4\n","'(1 2 3 4)\n"],
            result: "'(1 2 3)\n",
            resultShort: "'(1 2 3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(2 3 4)\n"],
            actualsShort: ["4\n","'(2 3 4)\n"],
            result: "'(2 3)\n",
            resultShort: "'(2 3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(3 4)\n"],
            actualsShort: ["4\n","'(3 4)\n"],
            result: "'(3)\n",
            resultShort: "'(3)\n",
            children: [{name: "drop",
            formals: ["x\n","(rest lst)\n"],
            formalsShort: ["x\n","(rest lst)\n"],
            actuals: ["4\n","'(4)\n"],
            actualsShort: ["4\n","'(4)\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]}]},{name: "map-concat",
            formals: ["f\n","(rest l)\n"],
            formalsShort: ["f\n","(rest l)\n"],
            actuals: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            actualsShort: ["#<procedure:...illiam buggy.rkt:30:18>\n","'()\n"],
            result: "'()\n",
            resultShort: "'()\n",
            children: []}]}]}]}]}]}]}