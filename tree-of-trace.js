var theTrace = {formals: "top-level",
            actuals: "top-level",
            result: "no-result",
            children: [{formals: "(remove-min (make-heap (list 8 4 3 9 1 6 12 14)))",
            actuals: "(remove-min #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))))",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 #(struct:bhnode 12 () ()) #(struct:bhnode 14 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            children: [{formals: "(make-bhnode (get-min l) (insert-merge x (bhnode-left l) (bhnode-right l)) r)",
            actuals: "(make-bhnode 3 #(struct:bhnode 4 #(struct:bhnode 12 () ()) #(struct:bhnode 14 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 #(struct:bhnode 12 () ()) #(struct:bhnode 14 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            children: [{formals: "(make-bhnode (get-min r) l (insert-merge x (bhnode-left r) (bhnode-right r)))",
            actuals: "(make-bhnode 4 #(struct:bhnode 12 () ()) #(struct:bhnode 14 () ()))",
            result: "#(struct:bhnode 4 #(struct:bhnode 12 () ()) #(struct:bhnode 14 () ()))",
            children: [{formals: "(make-bhnode x l r)",
            actuals: "(make-bhnode 14 () ())",
            result: "#(struct:bhnode 14 () ())",
            children: []},{formals: "(andmap (lambda (y) (or (not (bhnode? y)) (< x (get-min y)))) (list l r))",
            actuals: "(andmap #<procedure:...er/recursion.rkt:26:27> (() ()))",
            result: "#t",
            children: [{formals: "(not (bhnode? y))",
            actuals: "(not #f)",
            result: "#t",
            children: [{formals: "(bhnode? y)",
            actuals: "(bhnode? ())",
            result: "#f",
            children: []}]},{formals: "(not (bhnode? y))",
            actuals: "(not #f)",
            result: "#t",
            children: [{formals: "(bhnode? y)",
            actuals: "(bhnode? ())",
            result: "#f",
            children: []}]},{formals: "(list l r)",
            actuals: "(list () ())",
            result: "(() ())",
            children: []}]},{formals: "(bhnode-right r)",
            actuals: "(bhnode-right #(struct:bhnode 4 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-left r)",
            actuals: "(bhnode-left #(struct:bhnode 4 () ()))",
            result: "()",
            children: []},{formals: "(get-min r)",
            actuals: "(get-min #(struct:bhnode 4 () ()))",
            result: "4",
            children: []}]},{formals: "(< (get-min r) (get-min l))",
            actuals: "(< 4 12)",
            result: "#t",
            children: [{formals: "(get-min l)",
            actuals: "(get-min #(struct:bhnode 12 () ()))",
            result: "12",
            children: []},{formals: "(get-min r)",
            actuals: "(get-min #(struct:bhnode 4 () ()))",
            result: "4",
            children: []}]},{formals: "(not (bhnode? l))",
            actuals: "(not #t)",
            result: "#f",
            children: [{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 12 () ()))",
            result: "#t",
            children: []}]},{formals: "(< (get-min l) (get-min r))",
            actuals: "(< 12 4)",
            result: "#f",
            children: [{formals: "(get-min r)",
            actuals: "(get-min #(struct:bhnode 4 () ()))",
            result: "4",
            children: []},{formals: "(get-min l)",
            actuals: "(get-min #(struct:bhnode 12 () ()))",
            result: "12",
            children: []}]},{formals: "(not (bhnode? r))",
            actuals: "(not #t)",
            result: "#f",
            children: [{formals: "(bhnode? r)",
            actuals: "(bhnode? #(struct:bhnode 4 () ()))",
            result: "#t",
            children: []}]},{formals: "(andmap (lambda (y) (or (not (bhnode? y)) (< x (get-min y)))) (list l r))",
            actuals: "(andmap #<procedure:...er/recursion.rkt:26:27> (#(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "#f",
            children: [{formals: "(< x (get-min y))",
            actuals: "(< 14 12)",
            result: "#f",
            children: [{formals: "(get-min y)",
            actuals: "(get-min #(struct:bhnode 12 () ()))",
            result: "12",
            children: []}]},{formals: "(not (bhnode? y))",
            actuals: "(not #t)",
            result: "#f",
            children: [{formals: "(bhnode? y)",
            actuals: "(bhnode? #(struct:bhnode 12 () ()))",
            result: "#t",
            children: []}]},{formals: "(list l r)",
            actuals: "(list #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            result: "(#(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            children: []}]},{formals: "(bhnode-right l)",
            actuals: "(bhnode-right #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "#(struct:bhnode 4 () ())",
            children: []},{formals: "(bhnode-left l)",
            actuals: "(bhnode-left #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "#(struct:bhnode 12 () ())",
            children: []},{formals: "(get-min l)",
            actuals: "(get-min #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "3",
            children: []}]},{formals: "(< (get-min l) (get-min r))",
            actuals: "(< 3 6)",
            result: "#t",
            children: [{formals: "(get-min r)",
            actuals: "(get-min #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "6",
            children: []},{formals: "(get-min l)",
            actuals: "(get-min #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "3",
            children: []}]},{formals: "(not (bhnode? r))",
            actuals: "(not #t)",
            result: "#f",
            children: [{formals: "(bhnode? r)",
            actuals: "(bhnode? #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#t",
            children: []}]},{formals: "(andmap (lambda (y) (or (not (bhnode? y)) (< x (get-min y)))) (list l r))",
            actuals: "(andmap #<procedure:...er/recursion.rkt:26:27> (#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#f",
            children: [{formals: "(< x (get-min y))",
            actuals: "(< 14 3)",
            result: "#f",
            children: [{formals: "(get-min y)",
            actuals: "(get-min #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "3",
            children: []}]},{formals: "(not (bhnode? y))",
            actuals: "(not #t)",
            result: "#f",
            children: [{formals: "(bhnode? y)",
            actuals: "(bhnode? #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "#t",
            children: []}]},{formals: "(list l r)",
            actuals: "(list #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "(#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            children: []}]},{formals: "(bhnode-right new-h)",
            actuals: "(bhnode-right #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            children: []},{formals: "(bhnode-left new-h)",
            actuals: "(bhnode-left #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            children: []},{formals: "(bhnode? new-h)",
            actuals: "(bhnode? #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#t",
            children: []},{formals: "(empty? new-h)",
            actuals: "(empty? #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#f",
            children: []},{formals: "(make-bhnode (bhnode-value h) (bhnode-right h) (remove-left-most l))",
            actuals: "(make-bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            children: [{formals: "(make-bhnode (bhnode-value h) (bhnode-right h) (remove-left-most l))",
            actuals: "(make-bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            result: "#(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            children: [{formals: "(make-bhnode (bhnode-value h) (bhnode-right h) (remove-left-most l))",
            actuals: "(make-bhnode 9 () ())",
            result: "#(struct:bhnode 9 () ())",
            children: [{formals: "(empty? l)",
            actuals: "(empty? ())",
            result: "#t",
            children: []},{formals: "(bhnode? l)",
            actuals: "(bhnode? ())",
            result: "#f",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 14 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()))",
            result: "()",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()))",
            result: "9",
            children: []}]},{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 14 () ()))",
            result: "#t",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()))",
            result: "#(struct:bhnode 14 () ())",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())))",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())))",
            result: "6",
            children: []}]},{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()))",
            result: "#t",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())))",
            result: "#(struct:bhnode 9 #(struct:bhnode 14 () ()) ())",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))))",
            result: "#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))))",
            result: "1",
            children: []}]},{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())))",
            result: "#t",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))))",
            result: "#(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ()))",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 14 () ()))",
            result: "14",
            children: []},{formals: "(empty? l)",
            actuals: "(empty? ())",
            result: "#t",
            children: []},{formals: "(bhnode? l)",
            actuals: "(bhnode? ())",
            result: "#f",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 14 () ()))",
            result: "()",
            children: []},{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 14 () ()))",
            result: "#t",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()))",
            result: "#(struct:bhnode 14 () ())",
            children: []},{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()))",
            result: "#t",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())))",
            result: "#(struct:bhnode 9 #(struct:bhnode 14 () ()) ())",
            children: []},{formals: "(bhnode? l)",
            actuals: "(bhnode? #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())))",
            result: "#t",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))))",
            result: "#(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ()))",
            children: []},{formals: "(make-heap (list 8 4 3 9 1 6 12 14))",
            actuals: "(make-heap (8 4 3 9 1 6 12 14))",
            result: "#(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            children: [{formals: "(foldl insert empty ns)",
            actuals: "(foldl #<procedure:insert> () (8 4 3 9 1 6 12 14))",
            result: "#(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            children: [{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            result: "#(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ())) #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())))",
            children: [{formals: "(insert x r)",
            actuals: "(insert 14 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ()))",
            children: [{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ()))",
            result: "#(struct:bhnode 6 #(struct:bhnode 9 #(struct:bhnode 14 () ()) ()) #(struct:bhnode 8 () ()))",
            children: [{formals: "(insert x r)",
            actuals: "(insert 14 #(struct:bhnode 9 () ()))",
            result: "#(struct:bhnode 9 #(struct:bhnode 14 () ()) ())",
            children: [{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 9 #(struct:bhnode 14 () ()) ())",
            result: "#(struct:bhnode 9 #(struct:bhnode 14 () ()) ())",
            children: [{formals: "(insert x r)",
            actuals: "(insert 14 ())",
            result: "#(struct:bhnode 14 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 14 () ())",
            result: "#(struct:bhnode 14 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 14 9)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 9 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 9 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 9 () ()))",
            result: "9",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 9 () ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 9 () ()))",
            result: "#f",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 14 6)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#(struct:bhnode 9 () ())",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "6",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#f",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 14 1)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "1",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))))",
            result: "#f",
            children: []},{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            result: "#(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ())) #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())))",
            children: [{formals: "(insert x r)",
            actuals: "(insert 12 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            children: [{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            result: "#(struct:bhnode 3 #(struct:bhnode 12 () ()) #(struct:bhnode 4 () ()))",
            children: [{formals: "(insert x r)",
            actuals: "(insert 12 ())",
            result: "#(struct:bhnode 12 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 12 () ())",
            result: "#(struct:bhnode 12 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 12 3)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "#(struct:bhnode 4 () ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "3",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "#f",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 12 1)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ())))",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 () ()) ())",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ())))",
            result: "#(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ())))",
            result: "1",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ())))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ())))",
            result: "#f",
            children: []},{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            result: "#(struct:bhnode 1 #(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ())) #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()))",
            children: [{formals: "(insert x r)",
            actuals: "(insert 6 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "#(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            children: [{formals: "(make-bhnode x (insert y r) l)",
            actuals: "(make-bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            result: "#(struct:bhnode 6 #(struct:bhnode 8 () ()) #(struct:bhnode 9 () ()))",
            children: [{formals: "(insert y r)",
            actuals: "(insert 8 ())",
            result: "#(struct:bhnode 8 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 8 () ())",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 6 8)",
            result: "#t",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "#(struct:bhnode 9 () ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "8",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "#f",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 6 1)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ())))",
            result: "#(struct:bhnode 8 #(struct:bhnode 9 () ()) ())",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ())))",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 () ()) ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ())))",
            result: "1",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ())))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ())))",
            result: "#f",
            children: []},{formals: "(make-bhnode x (insert y r) l)",
            actuals: "(make-bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            result: "#(struct:bhnode 1 #(struct:bhnode 3 #(struct:bhnode 4 () ()) ()) #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()))",
            children: [{formals: "(insert y r)",
            actuals: "(insert 3 #(struct:bhnode 4 () ()))",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 () ()) ())",
            children: [{formals: "(make-bhnode x (insert y r) l)",
            actuals: "(make-bhnode 3 #(struct:bhnode 4 () ()) ())",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 () ()) ())",
            children: [{formals: "(insert y r)",
            actuals: "(insert 4 ())",
            result: "#(struct:bhnode 4 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 4 () ())",
            result: "#(struct:bhnode 4 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 3 4)",
            result: "#t",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 4 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 4 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 4 () ()))",
            result: "4",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 4 () ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 4 () ()))",
            result: "#f",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 1 3)",
            result: "#t",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ())))",
            result: "#(struct:bhnode 4 () ())",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ())))",
            result: "#(struct:bhnode 8 #(struct:bhnode 9 () ()) ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ())))",
            result: "3",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ())))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ())))",
            result: "#f",
            children: []},{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ()))",
            result: "#(struct:bhnode 3 #(struct:bhnode 8 #(struct:bhnode 9 () ()) ()) #(struct:bhnode 4 () ()))",
            children: [{formals: "(insert x r)",
            actuals: "(insert 9 #(struct:bhnode 8 () ()))",
            result: "#(struct:bhnode 8 #(struct:bhnode 9 () ()) ())",
            children: [{formals: "(make-bhnode y (insert x r) l)",
            actuals: "(make-bhnode 8 #(struct:bhnode 9 () ()) ())",
            result: "#(struct:bhnode 8 #(struct:bhnode 9 () ()) ())",
            children: [{formals: "(insert x r)",
            actuals: "(insert 9 ())",
            result: "#(struct:bhnode 9 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 9 () ())",
            result: "#(struct:bhnode 9 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 9 8)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 8 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 8 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 8 () ()))",
            result: "8",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 8 () ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 8 () ()))",
            result: "#f",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 9 3)",
            result: "#f",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ())))",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ())))",
            result: "#(struct:bhnode 4 () ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ())))",
            result: "3",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ())))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ())))",
            result: "#f",
            children: []},{formals: "(make-bhnode x (insert y r) l)",
            actuals: "(make-bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ()))",
            result: "#(struct:bhnode 3 #(struct:bhnode 4 () ()) #(struct:bhnode 8 () ()))",
            children: [{formals: "(insert y r)",
            actuals: "(insert 4 ())",
            result: "#(struct:bhnode 4 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 4 () ())",
            result: "#(struct:bhnode 4 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 3 4)",
            result: "#t",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 4 #(struct:bhnode 8 () ()) ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 4 #(struct:bhnode 8 () ()) ()))",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 4 #(struct:bhnode 8 () ()) ()))",
            result: "4",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 4 #(struct:bhnode 8 () ()) ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 4 #(struct:bhnode 8 () ()) ()))",
            result: "#f",
            children: []},{formals: "(make-bhnode x (insert y r) l)",
            actuals: "(make-bhnode 4 #(struct:bhnode 8 () ()) ())",
            result: "#(struct:bhnode 4 #(struct:bhnode 8 () ()) ())",
            children: [{formals: "(insert y r)",
            actuals: "(insert 8 ())",
            result: "#(struct:bhnode 8 () ())",
            children: [{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 8 () ())",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]}]},{formals: "(< x y)",
            actuals: "(< 4 8)",
            result: "#t",
            children: []},{formals: "(bhnode-right h)",
            actuals: "(bhnode-right #(struct:bhnode 8 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-left h)",
            actuals: "(bhnode-left #(struct:bhnode 8 () ()))",
            result: "()",
            children: []},{formals: "(bhnode-value h)",
            actuals: "(bhnode-value #(struct:bhnode 8 () ()))",
            result: "8",
            children: []},{formals: "(bhnode? h)",
            actuals: "(bhnode? #(struct:bhnode 8 () ()))",
            result: "#t",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? #(struct:bhnode 8 () ()))",
            result: "#f",
            children: []},{formals: "(make-bhnode x empty empty)",
            actuals: "(make-bhnode 8 () ())",
            result: "#(struct:bhnode 8 () ())",
            children: []},{formals: "(empty? h)",
            actuals: "(empty? ())",
            result: "#t",
            children: []}]},{formals: "(list 8 4 3 9 1 6 12 14)",
            actuals: "(list 8 4 3 9 1 6 12 14)",
            result: "(8 4 3 9 1 6 12 14)",
            children: []}]}]}]}